<?php

if (!class_exists('Safezone_Malware_Scanner')) {
    class Safezone_Malware_Scanner
    {
        public string $ip;
        public string $country_code;

        public function __construct()
        {
            $ip = $this->ip_info();
            $this->ip = $ip['ip'];
            $this->country_code = $ip['country_code'];
        }

        public function scanner(): void
        {
            $this->table_cleanup();
            // Download and extract Wordpress
            $this->download_wordpress();
            // Step 1 - Spamvertising Check
            $this->compare_directories();
            // Step 2 - Blacklist Ip Check (API)
            $this->blacklist_ip_check();
            // Step 3 - Spam Check
            $this->checkImageFiles();
            // Step 4 - Vulnerability Check (API)
            $this->vulnerability_check();
            // Step 5 - Bad Extensions Check (API)
            $this->bad_extensions_check();
            // Step 6 - Bad Functions Check (API)
            $this->bad_functions_check();
            // Step 7 - Blacklisted Username Check (API)
            $this->blacklisted_usernames_check();

            $this->delete_directory(SAFEZONE_PLUGIN_PATH . '/wordpress');
            unlink(SAFEZONE_PLUGIN_PATH . '/wordpress.zip');

            update_option('sz_last_malware_scan', date('Y-m-d H:i:s'));

        }

        public function compare_directories(): void {
            $dir2 = SAFEZONE_PLUGIN_PATH . 'wordpress/';
            $iterator1 = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(ABSPATH), RecursiveIteratorIterator::SELF_FIRST);
            foreach ($iterator1 as $item) {
                $file_path = str_replace(ABSPATH, '', $item->getPathname());
                if (str_contains($file_path, 'wp-content')) {
                    continue;
                }
                if (!$item->isDir()) {
                    if (!file_exists($dir2 . $file_path)) {
                        Safezone_Report::add('Suspicious extra file detected in WordPress Core files: <b>' . $file_path. '</b>', '1', 'Suspicious', 'Malware', $item->getPathname(), $this->ip);
                    } else {
                        $file1_content = file_get_contents($item->getPathname());
                        $file2_content = file_get_contents($dir2 . $file_path);
                        if ($file1_content !== $file2_content) {
                            Safezone_Report::add('Change detected in WordPress Core file: <b>' . $file_path. '</b>', '1', 'Suspicious', 'Malware', $item->getPathname(), $this->ip);
                        }
                    }
                }
            }

            $iterator2 = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir2), RecursiveIteratorIterator::SELF_FIRST);
            foreach ($iterator2 as $item) {
                $file_path = str_replace($dir2, '', $item->getPathname());
                if (!str_contains($file_path, 'wp-content') && !file_exists(ABSPATH . $file_path)) {
                    Safezone_Report::add('WordPress core file missing: <b>' . $file_path. '</b>', '1', 'Critical', 'Malware', $item->getPathname(), $this->ip);
                }
            }
        }

        public function blacklisted_usernames_check(): void
        {
            $response = wp_remote_get(API_URL . '/blacklisted-usernames');
            if (!is_wp_error($response)) {
                $responseData = json_decode(wp_remote_retrieve_body($response), true);
                if ($responseData['success']) {
                    $blacklistedUsernames = $responseData['data'] ?? [];
                    $allUsers = get_users();
                    foreach ($allUsers as $user) {
                        foreach ($blacklistedUsernames as $blacklistedUsername) {
                            if ($user->user_login === trim($blacklistedUsername['username'])) {
                                $text = 'A username has been marked as unsafe: <b>' . $user->user_login . '</b>';
                                Safezone_Report::add($text, "7", "Low", "Malware", '', ['ip' => $this->ip, 'country_code' => $this->country_code]);
                            }
                        }
                    }
                }
            }
        }

        public function bad_functions_check(): void
        {
            $response = wp_remote_get(API_URL . '/bad-functions');
            if (!is_wp_error($response)) {
                $responseData = json_decode(wp_remote_retrieve_body($response), true);
                if ($responseData['success']) {
                    $badFunctions = $responseData['data'] ?? [];
                    $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(ABSPATH));
                    foreach ($allFiles as $file) {
                        if ($file->isFile()) {
                            $content = file_get_contents($file->getRealPath());
                            foreach ($badFunctions as $badFunction) {
                                if (str_contains($content, ' '. $badFunction['name'] . '(')) {
                                    $text = 'The <b>' . $badFunction['name'] . '</b> function was found in the file: <b>' . $file->getRealPath() . '</b>';
                                    Safezone_Report::add($text, "6", "Critical", "Malware", $file->getRealPath(), ['ip' => $this->ip, 'country_code' => $this->country_code]);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        public function bad_extensions_check(): void
        {
            $response = wp_remote_get(API_URL . '/bad-extensions');
            if (!is_wp_error($response)) {
                $responseData = json_decode(wp_remote_retrieve_body($response), true);
                if ($responseData['success']) {
                    $badExtensions = $responseData['data'] ?? [];
                    $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(ABSPATH));
                    foreach ($allFiles as $file) {
                        if ($file->isFile()) {
                            $extension = $file->getExtension();
                            if (in_array($extension, $badExtensions)) {
                                $text = 'An extension that should not be present was found in the file directory: <b>' . $file->getRealPath() . '</b>';
                                Safezone_Report::add($text, "5", "Medium", "Malware", $file->getRealPath(), ['ip' => $this->ip, 'country_code' => $this->country_code]);
                            }
                        }
                    }
                }
            }
        }

        public function vulnerability_check(): void
        {
            if (!function_exists('get_plugin_data')) {
                require_once(ABSPATH . 'wp-admin/includes/plugin.php');
            }

            if (!function_exists('wp_get_theme')) {
                require_once(ABSPATH . 'wp-includes/theme.php');
            }

            $active_plugins = get_option('active_plugins');
            $active_themes = wp_get_themes();

            $plugins_info = [];
            foreach ($active_plugins as $plugin) {
                $plugin_data = get_plugin_data(WP_PLUGIN_DIR . '/' . $plugin);
                $plugin_info = [
                    'name' => $plugin_data['Name'],
                    'slug' => $plugin_data['TextDomain'],
                    'version' => $plugin_data['Version']
                ];
                $plugins_info[] = $plugin_info;
            }

            $themes_info = [];
            foreach ($active_themes as $theme) {
                $theme_info = [
                    'name' => $theme->get('Name'),
                    'slug' => $theme->get_stylesheet(),
                    'version' => $theme->get('Version')
                ];
                $themes_info[] = $theme_info;
            }

            $request_data = [
                'plugins' => $plugins_info,
                'themes' => $themes_info,
                'core_version' => get_bloginfo('version')
            ];

            $response = wp_remote_post(
                API_URL . '/vulnerabilities/check',
                [
                    'body' => $request_data,
                    'timeout' => 20,
                ]
            );

            if (!is_wp_error($response)) {
                $responseData = json_decode(wp_remote_retrieve_body($response), true);
                if ($responseData['success']) {
                    foreach ($responseData['data'] as $vulnerability) {
                        if ($vulnerability['cvss_score'] < 4) {
                            $state = 'Low';
                        } elseif ($vulnerability['cvss_score'] < 7) {
                            $state = 'Medium';
                        } else {
                            $state = 'Critical';
                        }
                        Safezone_Report::add($vulnerability['title'], "4", $state, 'Malware', '', ['ip' => $this->ip, 'country_code' => $this->country_code]);
                    }
                }
            }
        }

        public function checkImageFiles(): void
        {
            $imageExtensions = ['jpg', 'jpeg', 'png', 'gif'];
            $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(ABSPATH));
            foreach ($allFiles as $file) {
                if ($file->isFile()) {
                    $extension = strtolower($file->getExtension());
                    if (in_array($extension, $imageExtensions)) {
                        $imageInfo = @getimagesize($file->getPathname());
                        if ($imageInfo === false) {
                            Safezone_Report::add('The file is not an image file: <b>' . $file->getPathname() . '</b>',  "3",'Medium', 'Malware', $file->getPathname(), ['ip' => $this->ip, 'country_code' => $this->country_code]);
                        }
                    }
                }
            }
        }

        public function blacklist_ip_check(): void
        {
            $response = wp_remote_post(API_URL . '/blacklist-ips/check', ['body' => ['ip' => $this->ip],'timeout' => 20]);
            if (!is_wp_error($response)) {
                $responseData = json_decode(wp_remote_retrieve_body($response), true);
                if ($responseData['success']) {
                    Safezone_Report::add('IP:' . $this->ip . ' is marked as unsafe.', '2', 'Medium', 'Malware', '', ['ip' =>$this->ip, 'country_code' => $this->country_code]);
                }
            }
        }

        private function download_wordpress(): void
        {
            $zipUrl = "https://wordpress.org/wordpress-" . get_bloginfo('version') . ".zip";
            $zipFile = SAFEZONE_PLUGIN_PATH . '/wordpress.zip';
            $extractionDirectory = SAFEZONE_PLUGIN_PATH . '/wordpress';
            if (is_dir($extractionDirectory)) {
                self::delete_directory($extractionDirectory);
            }
            $zipContent = file_get_contents($zipUrl);
            file_put_contents($zipFile, $zipContent);
            $zip = new ZipArchive;
            if ($zip->open($zipFile) === TRUE) {
                $zip->extractTo(SAFEZONE_PLUGIN_PATH);
                $zip->close();
            }
        }

        private function delete_directory($dir): void
        {
            if (is_dir($dir)) {
                $objects = scandir($dir);
                foreach ($objects as $object) {
                    if ($object != "." && $object != "..") {
                        if (is_dir($dir . "/" . $object)) {
                            self::delete_directory($dir . "/" . $object);
                        } else {
                            unlink($dir . "/" . $object);
                        }
                    }
                }
                rmdir($dir);
            }
        }

        private function ip_info(): array
        {
            $response = file_get_contents('https://1.1.1.1/cdn-cgi/trace');
            $data = [];
            foreach (explode("\n", $response) as $line) {
                $line = explode('=', $line);
                $data[$line[0]] = $line[1];
            }

            return [
                'ip' => $data['ip'],
                'country_code' => $data['loc'],
                'country_name' => '',
            ];
        }

        private function table_cleanup(): void
        {
            global $wpdb;
            $wpdb->query("DELETE FROM {$wpdb->prefix}sz_reports WHERE scan_type = 'Malware'");
        }

        private function api_config(): array
        {
            return [];
        }
    }
}