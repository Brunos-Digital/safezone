<?php

if (!class_exists('Safezone_Malware_Scanner')) {
    class Safezone_Malware_Scanner
    {
        public function step1Checking(): bool
        {
            //wp_sz_malware_reports tablosunu temizle
            global $wpdb;
            $wpdb->query("TRUNCATE TABLE wp_sz_malware_reports");

            $wordpressDownload = $this->downloadWordPress();

            $differences = $this->compareWordPressDirectories();
            $output = [];

            if (!empty($differences)) {
                foreach ($differences as $difference) {
                    $output[] = $difference;
                }
            }
            $wordpressDirectory = ABSPATH . 'wp-content/plugins/safezone/wordpress';
            $wordpressZip = ABSPATH . 'wp-content/plugins/safezone/wordpress.zip';
            $this->deleteDirectory($wordpressDirectory);
            unlink($wordpressZip);


            if(count($output) > 0){
                return false;
            }

            return true;
        }


        private function downloadWordPress(): bool|string
        {
            $zipUrl = "https://wordpress.org/wordpress-" . get_bloginfo('version') . ".zip";
            $zipFile = ABSPATH . 'wp-content/plugins/safezone/wordpress.zip';
            $extractionDirectory = ABSPATH . 'wp-content/plugins/safezone/wordpress';

            if (is_dir($extractionDirectory)) {
                $this->deleteDirectory($extractionDirectory);
            }

            $zipContent = file_get_contents($zipUrl);
            file_put_contents($zipFile, $zipContent);

            $zip = new ZipArchive;
            if ($zip->open($zipFile) === TRUE) {
                $zip->extractTo(ABSPATH . 'wp-content/plugins/safezone/');
                $zip->close();
                return $extractionDirectory;
            } else {
                return false;
            }
        }

        private function deleteDirectory($dir): void
        {
            if (is_dir($dir)) {
                $objects = scandir($dir);
                foreach ($objects as $object) {
                    if ($object != "." && $object != "..") {
                        if (is_dir($dir . "/" . $object)) {
                            $this->deleteDirectory($dir . "/" . $object);
                        } else {
                            unlink($dir . "/" . $object);
                        }
                    }
                }
                rmdir($dir);
            }
        }

        private function compareWordPressDirectories() {
            $differences = [];

            $safezoneDirectory = ABSPATH . 'wp-content/plugins/safezone/wordpress/';
            $coreDirectory = ABSPATH;

            // Ana WordPress dizinindeki wp-admin ve wp-includes klasörlerini kontrol et
            $coreAdminDir = $coreDirectory . 'wp-admin';
            $coreIncludesDir = $coreDirectory . 'wp-includes';
            $safezoneAdminDir = $safezoneDirectory . 'wp-admin';
            $safezoneIncludesDir = $safezoneDirectory . 'wp-includes';

            // Ana WordPress dizinindeki wp-admin klasöründeki dosyaları ve klasörleri kontrol et
            $differences = array_merge($differences, $this->scanDirectory($coreAdminDir, $safezoneAdminDir));

            // Ana WordPress dizinindeki wp-includes klasöründeki dosyaları ve klasörleri kontrol et
            return array_merge($differences, $this->scanDirectory($coreIncludesDir, $safezoneIncludesDir));
        }

        private function compareWordPressDirectoriesUpload() {
            $differences = [];

            $safezoneDirectory = ABSPATH . 'wp-content/plugins/safezone/wordpress/';
            $coreDirectory = ABSPATH;

            //Exclude wp-admin and wp-includes directories

            // Ana WordPress dizinindeki wp-content ve wp-includes klasörlerini kontrol et
            $coreContentDir = $coreDirectory;
            $safezoneContentDir = $safezoneDirectory;

            // Ana WordPress dizinindeki wp-content klasöründeki dosyaları ve klasörleri kontrol et
            return array_merge($differences, $this->scanDirectory($coreContentDir, $safezoneContentDir));
        }

        private function scanDirectory($dir1, $dir2) {
            $differences = [];

            $dir1Contents = scandir($dir1);
            $dir2Contents = scandir($dir2);

            foreach ($dir1Contents as $item) {
                if ($item == '.' || $item == '..') {
                    continue;
                }

                $path1 = $dir1 . '/' . $item;
                $path2 = $dir2 . '/' . $item;

                if (!in_array($item, $dir2Contents)) {
                    $text = "WordPress core file missing: <b>$path1</b>";
                    $this->addReport($text, 'Critical');
                    $differences[] = $text;
                } elseif (is_file($path1)) {
                    $content1 = file_get_contents($path1);
                    $content2 = file_get_contents($path2);
                    if ($content1 !== $content2) {
                        $text = "Change detected in WordPress Core file: <b>$path1</b>";
                        $this->addReport($text, 'Critical');
                        $differences[] = $text;
                    }
                } elseif (is_dir($path1)) {
                    $differences = array_merge($differences, $this->scanDirectory($path1, $path2));
                }
            }

            foreach ($dir2Contents as $item) {
                if ($item == '.' || $item == '..') {
                    continue;
                }

                $path1 = $dir1 . '/' . $item;
                $path2 = $dir2 . '/' . $item;

                if (!in_array($item, $dir1Contents)) {
                    $text = "Suspicious extra file detected in WordPress Core files: <b>$path2</b>";
                    $this->addReport($text, 'Suspicious');
                    $differences[] = $text;
                }
            }

            return $differences;
        }

        public function step2Checking(): bool
        {
            $request_data = array(
                'ip' => $_SERVER['REMOTE_ADDR'] // Kullanıcının IP adresini kullanabilirsiniz
            );
            $apiUrl = 'https://api.safezone.test/api/blacklist-ips/check';
            $response = wp_remote_post(
                $apiUrl,
                array(
                    'body' => $request_data,
                    'timeout' => 20, // İsteğin maksimum süresi (saniye cinsinden)
                )
            );
            if (is_wp_error($response)) {
                return false;
            }
            $responseData = json_decode(wp_remote_retrieve_body($response), true);

            if($responseData['success']){
                $this->addReport('IP:'.$_SERVER["REMOTE_ADDR"].' is marked as unsafe.', 'Medium');
            }

            return !$responseData['success'];
        }

        public function step3Checking(): bool
        {
            $wordpressDownload = $this->downloadWordPress();
            $differences = $this->compareWordPressDirectoriesUpload();
            $output = [];
            if (!empty($differences)) {
                foreach ($differences as $difference) {
                    $output[] = $difference;
                }
            }
            $wordpressDirectory = ABSPATH . 'wp-content/plugins/safezone/wordpress';
            $wordpressZip = ABSPATH . 'wp-content/plugins/safezone/wordpress.zip';
            $this->deleteDirectory($wordpressDirectory);
            unlink($wordpressZip);
            if(count($output) > 0){
                return false;
            }

            return true;
        }

        public function step5Checking(): array
        {
            $apiUrl = 'https://api.safezone.test/api/bad-extensions';
            $response = wp_remote_get($apiUrl);

            // Yanıtı kontrol et
            if (is_wp_error($response)) {
                return ['error' => 'API yanıtı alınamadı: ' . $response->get_error_message()];
            }

            // Yanıtı JSON formatına dönüştür
            $responseData = json_decode(wp_remote_retrieve_body($response), true);

            // Yanıtta hata var mı kontrol et
            if (!$responseData['success']) {
                return ['error' => 'API yanıtı geçersiz JSON formatında.'];
            }

            // API'den gelen dosya uzantılarını kontrol et
            $badExtensions = $responseData['data'] ?? [];
            $foundExtensions = [];

            // WordPress dosyalarını tarayarak dosya uzantılarını kontrol et
            $wordpressDir = ABSPATH;
            $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($wordpressDir));
            foreach ($allFiles as $file) {
                if ($file->isFile()) {
                    $extension = $file->getExtension();
                    if (in_array($extension, $badExtensions)) {
                        $foundExtensions[] = [
                            'file' => $file->getRealPath(), // Dosyanın gerçek yolunu al
                            'extension' => $extension // Dosya uzantısı
                        ];
                    }
                }
            }

            if (!empty($foundExtensions)) {
                return ['message' => 'Kötü dosya uzantıları bulundu:', 'extensions' => $foundExtensions];
            } else {
                return ['message' => 'Kötü dosya uzantıları bulunamadı.'];
            }
        }

        public function checkImageFiles(): array
        {
            // WordPress dizinini tarayarak tüm dosya uzantılarını kontrol et
            $wordpressDir = ABSPATH;
            $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($wordpressDir));
            $imageExtensions = ['jpg', 'jpeg', 'png', 'gif']; // Resim dosyası uzantıları
            $suspectedFiles = [];

            foreach ($allFiles as $file) {
                if ($file->isFile()) {
                    $extension = strtolower($file->getExtension());
                    if (in_array($extension, $imageExtensions)) {
                        // Dosya uzantısı resim uzantısı ise, getimagesize fonksiyonunu kullanarak dosyanın bir resim dosyası olup olmadığını kontrol et
                        $imageInfo = @getimagesize($file->getPathname());
                        if ($imageInfo === false) {
                            // getimagesize başarısız olduysa, dosya bir resim gibi görünüyor ancak gerçekte bir resim değil, bu nedenle şüpheli dosyalara ekleyin
                            $suspectedFiles[] = $file->getPathname();
                        }
                    }
                }
            }

            if (!empty($suspectedFiles)) {
                return ['message' => 'Şüpheli dosyalar bulundu:', 'suspected_files' => $suspectedFiles];
            } else {
                return ['message' => 'Şüpheli dosya bulunamadı.'];
            }
        }

        public function step4Checking(): bool
        {
            //TODO: Sonra bakilacak.
            return true;
        }

        private function addReport($message, $state): void
        {
            global $wpdb;
            $wpdb->insert('wp_sz_malware_reports', [
                'message' => str_replace(['//'],['/'],$message),
                'state' => $state
            ]);
        }
    }
}
